#!/usr/bin/python3

# Generate package.xml

import os, argparse

CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))

TEMPLATE = """
<?xml version="1.0"?>
<?xml-model
  href="http://download.ros.org/schema/package_format3.xsd"
  schematypens="http://www.w3.org/2001/XMLSchema"?>
<package format="3">
  <name>{name}</name>
  <version>1.0.0</version>
  <description>Autogenerated.</description>
  <maintainer email="nobody@nowhere.com">nobody</maintainer>
  <license>Apache License 2.0</license>
  <buildtool_depend>cmake</buildtool_depend>

  <buildtool_export_depend>cmake</buildtool_export_depend>

  <export>
    <build_type>cmake</build_type>
  </export>
</package>
"""

def generate_string(name):
    return TEMPLATE.format(name=name)

def strip_trailing_slash(s):
    while s.endswith(os.path.sep):
        s = s[:-1]
    return s

def generate_one(path):
    dst = os.path.join(path, 'package.xml')
    if os.path.isfile(dst):
        print('{} exists'.format(dst))
        return
    path = strip_trailing_slash(path)
    name = os.path.basename(path)
    xml = generate_string(name)
    with open(dst, 'w') as f:
        f.write(xml)

def generate_from_manifest(path):
    import yaml
    with open(path) as f:
        doc = yaml.load(f)
    repositories = doc['repositories']
    for item in repositories:
        package = os.path.join(os.path.dirname(path), 'src', item)
        generate_one(package)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('path', help='package/manifest path')
    args = parser.parse_args()

    path = args.path
    if os.path.isfile(path):
        generate_from_manifest(path)
    else:
        generate_one(path)

if __name__ == '__main__':
    main()
